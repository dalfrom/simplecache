// Code generated by goyacc - DO NOT EDIT.

package scl

import __yyfmt__ "fmt"

import (
	"fmt"
)

// Result AST structs
type Statement interface{}

type SetStmt struct {
	Collection string
	Key        string
	Value      string
	Config     Config
}

type GetStmt struct {
	Collection string
	Key        string
}

type DeleteStmt struct {
	Collection string
	Key        string
}

type TruncateStmt struct {
	Collection string
}

type DropStmt struct {
	Collection string
	Key        string
}

type UpdateStmt struct {
	Collection string
	Key        string
	Value      string
	Config     Config
}

type Config struct {
	Tti string // Time To Invalidate
}

type yySymType struct {
	yys  int
	str  string
	stmt Statement
	cfg  Config
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57364
	yyEofCode  = 57344
	ASTERISK   = 57363
	BOOL       = 57350
	COLLECTION = 57346
	COLON      = 57358
	DELETE     = 57354
	DOT        = 57360
	DROP       = 57356
	EQ         = 57362
	GET        = 57353
	JSON       = 57351
	KEY        = 57347
	NUMBER     = 57349
	SEMICOLON  = 57359
	SET        = 57352
	STRING     = 57348
	TRUNCATE   = 57355
	TTI        = 57361
	UPDATE     = 57357
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -27
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57359: 0,  // SEMICOLON (25x)
		57346: 1,  // COLLECTION (6x)
		57366: 2,  // collection (6x)
		57361: 3,  // TTI (6x)
		57360: 4,  // DOT (5x)
		57371: 5,  // key (4x)
		57347: 6,  // KEY (4x)
		57349: 7,  // NUMBER (4x)
		57344: 8,  // $end (3x)
		57358: 9,  // COLON (3x)
		57354: 10, // DELETE (3x)
		57356: 11, // DROP (3x)
		57353: 12, // GET (3x)
		57352: 13, // SET (3x)
		57355: 14, // TRUNCATE (3x)
		57357: 15, // UPDATE (3x)
		57350: 16, // BOOL (2x)
		57367: 17, // config (2x)
		57351: 18, // JSON (2x)
		57348: 19, // STRING (2x)
		57377: 20, // value (2x)
		57363: 21, // ASTERISK (1x)
		57365: 22, // asterisk (1x)
		57368: 23, // delete_stmt (1x)
		57369: 24, // drop_stmt (1x)
		57362: 25, // EQ (1x)
		57370: 26, // get_stmt (1x)
		57372: 27, // set_stmt (1x)
		57373: 28, // statement (1x)
		57374: 29, // statements (1x)
		57375: 30, // truncate_stmt (1x)
		57376: 31, // update_stmt (1x)
		57364: 32, // $default (0x)
		57345: 33, // error (0x)
	}

	yySymNames = []string{
		"SEMICOLON",
		"COLLECTION",
		"collection",
		"TTI",
		"DOT",
		"key",
		"KEY",
		"NUMBER",
		"$end",
		"COLON",
		"DELETE",
		"DROP",
		"GET",
		"SET",
		"TRUNCATE",
		"UPDATE",
		"BOOL",
		"config",
		"JSON",
		"STRING",
		"value",
		"ASTERISK",
		"asterisk",
		"delete_stmt",
		"drop_stmt",
		"EQ",
		"get_stmt",
		"set_stmt",
		"statement",
		"statements",
		"truncate_stmt",
		"update_stmt",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {29, 0},
		2:  {29, 3},
		3:  {28, 1},
		4:  {28, 1},
		5:  {28, 1},
		6:  {28, 1},
		7:  {28, 1},
		8:  {28, 1},
		9:  {27, 6},
		10: {27, 7},
		11: {26, 4},
		12: {26, 4},
		13: {23, 4},
		14: {30, 2},
		15: {24, 2},
		16: {31, 6},
		17: {31, 7},
		18: {2, 1},
		19: {5, 1},
		20: {20, 1},
		21: {20, 1},
		22: {20, 1},
		23: {20, 1},
		24: {22, 1},
		25: {17, 3},
		26: {17, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [48][]uint8{
		// 0
		{8: 26, 10: 26, 26, 26, 26, 26, 26, 29: 28},
		{8: 27, 10: 38, 40, 37, 36, 39, 41, 23: 32, 34, 26: 31, 30, 29, 30: 33, 35},
		{74},
		{24},
		{23},
		// 5
		{22},
		{21},
		{20},
		{19},
		{1: 43, 68},
		// 10
		{1: 43, 63},
		{1: 43, 60},
		{1: 43, 59},
		{1: 43, 58},
		{1: 43, 42},
		// 15
		{4: 44},
		{9, 4: 9},
		{5: 45, 46},
		{9: 47},
		{8, 9: 8},
		// 20
		{7: 50, 16: 51, 18: 52, 49, 48},
		{11, 3: 54, 17: 53},
		{7, 3: 7},
		{6, 3: 6},
		{5, 3: 5},
		// 25
		{4, 3: 4},
		{10},
		{7: 56, 25: 55},
		{7: 57},
		{1},
		// 30
		{2},
		{12},
		{13},
		{4: 61},
		{5: 62, 46},
		// 35
		{14},
		{4: 64},
		{5: 65, 46, 21: 67, 66},
		{16},
		{15},
		// 40
		{3},
		{4: 69},
		{5: 70, 46},
		{9: 71},
		{7: 50, 16: 51, 18: 52, 49, 72},
		// 45
		{18, 3: 54, 17: 73},
		{17},
		{8: 25, 10: 25, 25, 25, 25, 25, 25},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 33

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			stmtType := ""
			switch yyS[yypt-1].stmt.(type) {
			case *SetStmt:
				stmtType = "SET"
			case *GetStmt:
				stmtType = "GET"
			case *DeleteStmt:
				stmtType = "DELETE"
			case *TruncateStmt:
				stmtType = "TRUNCATE"
			case *DropStmt:
				stmtType = "DROP"
			case *UpdateStmt:
				stmtType = "UPDATE"
			}
			err := PrintToStd(yyS[yypt-1].stmt, stmtType)
			if err != nil {
				fmt.Println("Error extracting SCL:", err)
			}
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 4:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 5:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 6:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 8:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 9:
		{
			yyVAL.stmt = &SetStmt{Collection: yyS[yypt-4].str, Key: yyS[yypt-2].str, Value: yyS[yypt-0].str}
		}
	case 10:
		{
			yyVAL.stmt = &SetStmt{Collection: yyS[yypt-5].str, Key: yyS[yypt-3].str, Value: yyS[yypt-1].str, Config: yyS[yypt-0].cfg}
		}
	case 11:
		{
			yyVAL.stmt = &GetStmt{Collection: yyS[yypt-2].str, Key: yyS[yypt-0].str}
		}
	case 12:
		{
			yyVAL.stmt = &GetStmt{Collection: yyS[yypt-2].str, Key: "*"}
		}
	case 13:
		{
			yyVAL.stmt = &DeleteStmt{Collection: yyS[yypt-2].str, Key: yyS[yypt-0].str}
		}
	case 14:
		{
			yyVAL.stmt = &TruncateStmt{Collection: yyS[yypt-0].str}
		}
	case 15:
		{
			yyVAL.stmt = &DropStmt{Collection: yyS[yypt-0].str, Key: "*"}
		}
	case 16:
		{
			yyVAL.stmt = &UpdateStmt{Collection: yyS[yypt-4].str, Key: yyS[yypt-2].str, Value: yyS[yypt-0].str}
		}
	case 17:
		{
			yyVAL.stmt = &UpdateStmt{Collection: yyS[yypt-5].str, Key: yyS[yypt-3].str, Value: yyS[yypt-1].str, Config: yyS[yypt-0].cfg}
		}
	case 25:
		{
			yyVAL.cfg = Config{Tti: yyS[yypt-0].str}
		}
	case 26:
		{
			yyVAL.cfg = Config{Tti: yyS[yypt-0].str}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
