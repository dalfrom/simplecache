// Code generated by goyacc - DO NOT EDIT.

package scl

import __yyfmt__ "fmt"

import (
	"fmt"
)

// AST nodes
type Statement interface{}

type SetStmt struct {
	Collection string
	Key        string
	Value      interface{}
	Config     Config
}

type UpdateStmt struct {
	Collection string
	Key        string
	Value      interface{}
	Config     Config
}

type GetStmt struct {
	Collection string
	Key        string // or "*" for wildcard
}

type DeleteStmt struct {
	Collection string
	Key        string
}

type DropStmt struct {
	Collection string
	Key        string
}

type TruncateStmt struct {
	Collection string
}

type Config struct {
	Tti string // Time To Invalidate
}

type yySymType struct {
	yys  int
	str  string
	cfg  Config
	val  interface{}
	obj  map[string]interface{}
	arr  []interface{}
	stmt Statement
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57371
	yyEofCode  = 57344
	ASTERISK   = 57364
	COLLECTION = 57346
	COLON      = 57361
	COMMA      = 57370
	DELETE     = 57354
	DOT        = 57360
	DROP       = 57355
	EQ         = 57363
	FALSE      = 57358
	GET        = 57352
	IDENT      = 57350
	KEY        = 57347
	LBRACE     = 57366
	LBRACK     = 57368
	NULL       = 57359
	NUMBER     = 57349
	RBRACE     = 57367
	RBRACK     = 57369
	SEMICOLON  = 57362
	SET        = 57351
	STRING     = 57348
	TRUE       = 57357
	TRUNCATE   = 57356
	TTI        = 57365
	UPDATE     = 57353
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -41
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57362: 0,  // SEMICOLON (30x)
		57370: 1,  // COMMA (20x)
		57367: 2,  // RBRACE (18x)
		57369: 3,  // RBRACK (15x)
		57365: 4,  // TTI (14x)
		57349: 5,  // NUMBER (9x)
		57348: 6,  // STRING (9x)
		57358: 7,  // FALSE (7x)
		57377: 8,  // json_array (7x)
		57378: 9,  // json_object (7x)
		57379: 10, // json_value (7x)
		57366: 11, // LBRACE (7x)
		57368: 12, // LBRACK (7x)
		57359: 13, // NULL (7x)
		57357: 14, // TRUE (7x)
		57346: 15, // COLLECTION (6x)
		57347: 16, // KEY (6x)
		57361: 17, // COLON (5x)
		57360: 18, // DOT (4x)
		57344: 19, // $end (3x)
		57354: 20, // DELETE (3x)
		57355: 21, // DROP (3x)
		57352: 22, // GET (3x)
		57351: 23, // SET (3x)
		57356: 24, // TRUNCATE (3x)
		57353: 25, // UPDATE (3x)
		57372: 26, // config (2x)
		57350: 27, // IDENT (2x)
		57380: 28, // member (2x)
		57387: 29, // value (2x)
		57364: 30, // ASTERISK (1x)
		57373: 31, // delete_stmt (1x)
		57374: 32, // drop_stmt (1x)
		57375: 33, // elements (1x)
		57363: 34, // EQ (1x)
		57376: 35, // get_stmt (1x)
		57381: 36, // members (1x)
		57382: 37, // set_stmt (1x)
		57383: 38, // statement (1x)
		57384: 39, // statements (1x)
		57385: 40, // truncate_stmt (1x)
		57386: 41, // update_stmt (1x)
		57371: 42, // $default (0x)
		57345: 43, // error (0x)
	}

	yySymNames = []string{
		"SEMICOLON",
		"COMMA",
		"RBRACE",
		"RBRACK",
		"TTI",
		"NUMBER",
		"STRING",
		"FALSE",
		"json_array",
		"json_object",
		"json_value",
		"LBRACE",
		"LBRACK",
		"NULL",
		"TRUE",
		"COLLECTION",
		"KEY",
		"COLON",
		"DOT",
		"$end",
		"DELETE",
		"DROP",
		"GET",
		"SET",
		"TRUNCATE",
		"UPDATE",
		"config",
		"IDENT",
		"member",
		"value",
		"ASTERISK",
		"delete_stmt",
		"drop_stmt",
		"elements",
		"EQ",
		"get_stmt",
		"members",
		"set_stmt",
		"statement",
		"statements",
		"truncate_stmt",
		"update_stmt",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {39, 0},
		2:  {39, 3},
		3:  {38, 1},
		4:  {38, 1},
		5:  {38, 1},
		6:  {38, 1},
		7:  {38, 1},
		8:  {38, 1},
		9:  {37, 6},
		10: {37, 7},
		11: {41, 6},
		12: {41, 7},
		13: {35, 4},
		14: {35, 4},
		15: {31, 4},
		16: {32, 2},
		17: {40, 2},
		18: {29, 1},
		19: {29, 1},
		20: {29, 1},
		21: {10, 1},
		22: {10, 1},
		23: {10, 1},
		24: {10, 1},
		25: {10, 1},
		26: {10, 1},
		27: {10, 1},
		28: {9, 2},
		29: {9, 3},
		30: {36, 1},
		31: {36, 3},
		32: {28, 3},
		33: {28, 3},
		34: {28, 3},
		35: {8, 2},
		36: {8, 3},
		37: {33, 1},
		38: {33, 3},
		39: {26, 3},
		40: {26, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [74][]uint8{
		// 0
		{19: 40, 40, 40, 40, 40, 40, 40, 39: 42},
		{19: 41, 53, 54, 52, 50, 55, 51, 31: 47, 48, 35: 46, 37: 44, 43, 40: 49, 45},
		{114},
		{38},
		{37},
		// 5
		{36},
		{35},
		{34},
		{33},
		{15: 108},
		// 10
		{15: 65},
		{15: 61},
		{15: 58},
		{15: 57},
		{15: 56},
		// 15
		{24},
		{25},
		{18: 59},
		{16: 60},
		{26},
		// 20
		{18: 62},
		{16: 63, 30: 64},
		{28},
		{27},
		{18: 66},
		// 25
		{16: 67},
		{17: 68},
		{5: 71, 70, 76, 74, 73, 72, 78, 79, 77, 75, 29: 69},
		{30, 4: 104, 26: 103},
		{23, 4: 23},
		// 30
		{22, 4: 22},
		{21, 4: 21},
		{18, 18, 18, 18, 18},
		{17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16},
		// 35
		{15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14},
		{2: 88, 6: 91, 16: 93, 27: 92, 90, 36: 89},
		{3: 82, 5: 81, 80, 76, 74, 73, 84, 78, 79, 77, 75, 33: 83},
		{1: 20, 20, 20},
		// 40
		{1: 19, 19, 19},
		{6, 6, 6, 6, 6},
		{1: 86, 3: 85},
		{1: 4, 3: 4},
		{5, 5, 5, 5, 5},
		// 45
		{5: 81, 80, 76, 74, 73, 87, 78, 79, 77, 75},
		{1: 3, 3: 3},
		{13, 13, 13, 13, 13},
		{1: 101, 100},
		{1: 11, 11},
		// 50
		{17: 98},
		{17: 96},
		{17: 94},
		{5: 81, 80, 76, 74, 73, 95, 78, 79, 77, 75},
		{1: 7, 7},
		// 55
		{5: 81, 80, 76, 74, 73, 97, 78, 79, 77, 75},
		{1: 8, 8},
		{5: 81, 80, 76, 74, 73, 99, 78, 79, 77, 75},
		{1: 9, 9},
		{12, 12, 12, 12, 12},
		// 60
		{6: 91, 16: 93, 27: 92, 102},
		{1: 10, 10},
		{29},
		{5: 106, 34: 105},
		{5: 107},
		// 65
		{1},
		{2},
		{18: 109},
		{16: 110},
		{17: 111},
		// 70
		{5: 71, 70, 76, 74, 73, 72, 78, 79, 77, 75, 29: 112},
		{32, 4: 104, 26: 113},
		{31},
		{19: 39, 39, 39, 39, 39, 39, 39},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 43

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			stmtType := ""
			switch yyS[yypt-1].stmt.(type) {
			case *SetStmt:
				stmtType = "SET"
			case *GetStmt:
				stmtType = "GET"
			case *DeleteStmt:
				stmtType = "DELETE"
			case *TruncateStmt:
				stmtType = "TRUNCATE"
			case *DropStmt:
				stmtType = "DROP"
			case *UpdateStmt:
				stmtType = "UPDATE"
			}
			err := ExtractStatementDataFromToken(yyS[yypt-1].stmt, stmtType)
			if err != nil {
				fmt.Println("Error extracting SCL:", err)
			}
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 4:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 5:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 6:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 8:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 9:
		{
			yyVAL.stmt = &SetStmt{Collection: yyS[yypt-4].str, Key: yyS[yypt-2].str, Value: yyS[yypt-0].val}
		}
	case 10:
		{
			yyVAL.stmt = &SetStmt{Collection: yyS[yypt-5].str, Key: yyS[yypt-3].str, Value: yyS[yypt-1].val, Config: yyS[yypt-0].cfg}
		}
	case 11:
		{
			yyVAL.stmt = &UpdateStmt{Collection: yyS[yypt-4].str, Key: yyS[yypt-2].str, Value: yyS[yypt-0].val}
		}
	case 12:
		{
			yyVAL.stmt = &UpdateStmt{Collection: yyS[yypt-5].str, Key: yyS[yypt-3].str, Value: yyS[yypt-1].val, Config: yyS[yypt-0].cfg}
		}
	case 13:
		{
			yyVAL.stmt = &GetStmt{Collection: yyS[yypt-2].str, Key: yyS[yypt-0].str}
		}
	case 14:
		{
			yyVAL.stmt = &GetStmt{Collection: yyS[yypt-2].str, Key: "*"}
		}
	case 15:
		{
			yyVAL.stmt = &DeleteStmt{Collection: yyS[yypt-2].str, Key: yyS[yypt-0].str}
		}
	case 16:
		{
			yyVAL.stmt = &DropStmt{Collection: yyS[yypt-0].str, Key: "*"}
		}
	case 17:
		{
			yyVAL.stmt = &TruncateStmt{Collection: yyS[yypt-0].str}
		}
	case 18:
		{
			yyVAL.val = yyS[yypt-0].str
		}
	case 19:
		{
			yyVAL.val = yyS[yypt-0].str
		}
	case 20:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 21:
		{
			yyVAL.val = yyS[yypt-0].str
		}
	case 22:
		{
			yyVAL.val = yyS[yypt-0].str
		}
	case 23:
		{
			yyVAL.val = yyS[yypt-0].obj
		}
	case 24:
		{
			yyVAL.val = yyS[yypt-0].arr
		}
	case 25:
		{
			yyVAL.val = true
		}
	case 26:
		{
			yyVAL.val = false
		}
	case 27:
		{
			yyVAL.val = nil
		}
	case 28:
		{
			yyVAL.obj = map[string]interface{}{}
		}
	case 29:
		{
			yyVAL.obj = yyS[yypt-1].obj
		}
	case 30:
		{
			yyVAL.obj = yyS[yypt-0].obj
		}
	case 31:
		{
			for k, v := range yyS[yypt-0].obj {
				yyS[yypt-2].obj[k] = v
			}
			yyVAL.obj = yyS[yypt-2].obj
		}
	case 32:
		{
			yyVAL.obj = map[string]interface{}{yyS[yypt-2].str: yyS[yypt-0].val}
		}
	case 33:
		{
			yyVAL.obj = map[string]interface{}{yyS[yypt-2].str: yyS[yypt-0].val}
		}
	case 34:
		{
			yyVAL.obj = map[string]interface{}{yyS[yypt-2].str: yyS[yypt-0].val}
		}
	case 35:
		{
			yyVAL.arr = []interface{}{}
		}
	case 36:
		{
			yyVAL.arr = yyS[yypt-1].arr
		}
	case 37:
		{
			yyVAL.arr = []interface{}{yyS[yypt-0].val}
		}
	case 38:
		{
			yyVAL.arr = append(yyS[yypt-2].arr, yyS[yypt-0].val)
		}
	case 39:
		{
			yyVAL.cfg = Config{Tti: yyS[yypt-0].str}
		}
	case 40:
		{
			yyVAL.cfg = Config{Tti: yyS[yypt-0].str}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
